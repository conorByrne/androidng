package org.appcelerator.titanium.bridge;

import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.util.Log;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;

public class TiProxy extends ScriptableObject implements Function
{
	private static final String LCAT = "TiProxy";
	private WeakReference<TiContext> weakTiContext;
	private String className;
	protected Object proxy;

	public TiProxy(TiContext tiContext, Scriptable scope, Scriptable prototype) {
		super(scope, prototype);
		this.weakTiContext = new WeakReference<TiContext>(tiContext);
		className = "unknown";
	}

	@Override
	public String getClassName() {
		return className;
	}

	@Override
	public Object get(String name, Scriptable start)
	{
		if(this.has(name, start)) {
    		return super.get(name, start);
		}

		Log.i(LCAT, "Looking for name " + name);

		Object o = NOT_FOUND;

		if (proxy == null) {
			// See if we can find an object for name

			String moduleName = createModuleName(name);
			try {
				Class<?> c = Class.forName(createModuleName(name));
				if (c != null) {

					Constructor<?>[] ctors = c.getConstructors();
					if (ctors.length == 1) {
						Constructor<?> ctor = ctors[0];
						Class<?>[] types = ctor.getParameterTypes();
						if (types.length == 0) {
							TiProxy p = new TiProxy(weakTiContext.get(), this, this.getPrototype());
							p.proxy = c.newInstance();
							o = p;
						} else if (types.length == 2) {


						} else {
							Log.e(LCAT, "No valid constructor found.");
						}
					} else {
						Log.w(LCAT, "TiProxy currently requires one contructor in a module.");
					}

				}
			} catch (Exception e) {
				Log.e(LCAT, "No Module for name " + name + " expected " + moduleName);
			}
		} else {
			Method[] methods = proxy.getClass().getMethods();
			for(Method method : methods) {
				if (method.getName().equals(name)) {
					TiProxy p = new TiProxy(weakTiContext.get(), this, this.getPrototype());
					p.proxy = method;
					o = p;
					break;
				}
			}
		}

		return o;
	}

	public Object call(Context ctx, Scriptable scope, Scriptable thisObj, Object[] args) {
		Object result = null;
		TiProxy pObj = (TiProxy) thisObj;
		Method method = (Method) proxy;
		try {
			// Convert args.
			Class<?>[] types = method.getParameterTypes();
			Object[] newArgs = new Object[types.length];
			for (int i = 0; i < types.length; i++) {
				newArgs[i] = ctx.jsToJava(args[i], types[i]);
			}
			result = method.invoke(pObj.proxy, newArgs);
		} catch (InvocationTargetException e) {
			Context.throwAsScriptRuntimeEx(e);
		} catch (IllegalAccessException e) {
			Context.throwAsScriptRuntimeEx(e);
		}

		return result;
	}

	public Scriptable construct(Context arg0, Scriptable arg1, Object[] arg2) {
		return null;
	}





	private static String createModuleName(String name) {
		StringBuilder sb = new StringBuilder(100);
		sb.append("ti.module.")
			.append(name.toLowerCase())
			.append(".")
			.append(name)
			.append("Module");

		return sb.toString();
	}
}
